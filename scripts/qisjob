#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""qis_job.py
Load from qasm source or Qiskit QuantumCircuit sourceand run job with reporting.
Copyright 2019 Jack Woehr jwoehr@softwoehr.com PO Box 51, Golden, CO 80402-0051
BSD-3 license -- See LICENSE which you should have received with this code.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES."""

import argparse
import sys
from qis_job import QisJob

EXPLANATION = """qis_job.py : Loads from one or more qasm source files or
from a file containing a Qiskit QuantumCircuit definition in Python and runs as
experiments with reporting in CSV form. Can graph results as histogram or
state-city plot. Also can give info on backend properties, qiskit version,
show circuit transpilation, etc. Can run as multiple jobs or all as one job.
Exits 0 on success, 1 on argument error, 100 on runtime error.
Copyright 2019 Jack Woehr jwoehr@softwoehr.com PO Box 51, Golden, CO 80402-0051.
BSD-3 license -- See LICENSE which you should have received with this code.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
"""
PARSER = argparse.ArgumentParser(description=EXPLANATION)
GROUP = PARSER.add_mutually_exclusive_group()
GROUPB = PARSER.add_mutually_exclusive_group()
GROUP.add_argument("-i", "--ibmq", action="store_true",
                   help="Use best genuine IBMQ processor (default)")
GROUP.add_argument("-s", "--sim", action="store_true",
                   help="Use IBMQ qasm simulator")
GROUP.add_argument("-a", "--aer", action="store_true",
                   help="""Use QISKit Aer simulator.
                   Default is Aer statevector simulator.
                   Use -a --qasm-simulator to get Aer qasm simulator.
                   Use -a --unitary-simulator to get Aer unitary simulator.""")
GROUP.add_argument("--qcgpu", action="store_true",
                   help="""Use qcgpu simulator.
                   Default is statevector simulator.
                   Use --qcgpu --qasm-simulator to get qcgpu qasm simulator.""")
GROUP.add_argument("-b", "--backend", action="store",
                   help="Use specified IBMQ backend")
GROUPB.add_argument("--qasm_simulator", action="store_true",
                    help="""With -a or --qcgpu use qasm simulator
                    instead of statevector simulator""")
GROUPB.add_argument("--unitary_simulator", action="store_true",
                    help="""With -a use unitary simulator
                    instead of statevector simulator""")
PARSER.add_argument("--api_provider", action="store",
                    help="""Backend remote api provider,
                    currently supported are [IBMQ | QI | Forest].
                    Default is IBMQ.""", default="IBMQ")
PARSER.add_argument("--qvm", action="store_true",
                    help="""Use Forest local qvm simulator described by
                    -b backend, generally one of qasm_simulator or
                    statevector_simulator. Use --qvm_as to instruct the
                    simulator to emulate a specific Rigetti QPU""")
PARSER.add_argument("--qvm_as", action="store_true",
                    help="""Use Forest local qvm simulator to emulate the
                    specific Rigetti QPU described by -b backend. Use --qvm
                    to run the Forest local qvm simulator described by
                    -b backend.""")
PARSER.add_argument("--backends", action="store_true",
                    help="Print list of backends to stdout and exit 0")
PARSER.add_argument("-1", "--one_job", action="store_true",
                    help="Run all experiments as one job")
PARSER.add_argument("-c", "--credits", type=int, action="store", default=3,
                    help="Max credits to expend on each job, default is 3")
PARSER.add_argument("-d", "--datetime", type=str, action="store",
                    help="""Datetime 'year,month,day[,hour,min,sec]'
                    for -p,--properties""")
PARSER.add_argument("-g", "--configuration", action="store_true",
                    help="""Print configuration for backend specified by -b
                    to stdout and exit 0""")
PARSER.add_argument("-j", "--job", action="store_true",
                    help="Print your job's dictionary")
PARSER.add_argument("--jobs", type=int, action="store",
                    help="Print JOBS jobs and status for -b backend and exit 0")
PARSER.add_argument("--job_id", type=str, action="store",
                    help="Print job number JOB_ID for -b backend and exit 0")
PARSER.add_argument("--job_result", type=str, action="store",
                    help=""""Print result of job number JOB_RESULT for
                    -b backend and exit 0""")
PARSER.add_argument("-m", "--memory", action="store_true",
                    help="Print individual results of multishot experiment")
PARSER.add_argument("-o", "--outfile", action="store",
                    help="Write appending CSV to outfile, default is stdout")
PARSER.add_argument("-p", "--properties", action="store_true",
                    help="""Print properties for backend specified by -b to
                    stdout and exit 0""")
PARSER.add_argument("-q", "--qubits", type=int, action="store", default=5,
                    help="Number of qubits for the experiment, default is 5")
PARSER.add_argument("--qiskit_version", action="store_true",
                    help="Print Qiskit version and exit 0")
PARSER.add_argument("-r", "--result", action="store_true",
                    help="Print job result")
PARSER.add_argument("-t", "--shots", type=int, action="store", default=1024,
                    help="Number of shots for the experiment, default 1024, max 8192")
PARSER.add_argument("-v", "--verbose", action="count", default=0,
                    help="Increase verbosity each -v up to 3")
PARSER.add_argument("-x", "--transpile", action="store_true",
                    help="""Print circuit transpiled for chosen backend to stdout
                    before running job""")
PARSER.add_argument("--circuit_layout", action="store_true",
                    help="""With -x, write image file of circuit layout
                    after transpile (see --figure_basename)""")
PARSER.add_argument("--histogram", action="store_true",
                    help="""Write image file of histogram of experiment
                    results (see --figure_basename)""")
PARSER.add_argument("--plot_state_city", type=int, action="store",
                    help="""Write image file of state city plot of statevector to
                    PLOT_STATE_CITY decimal points (see --figure_basename)""")
PARSER.add_argument("--figure_basename", type=str, action="store",
                    default='figout',
                    help="""basename including path (if any) for figure output,
                    default='figout', backend name, figure type, and timestamp
                    will be appended""")
PARSER.add_argument("--qasm", action="store_true",
                    help="Print qasm file to stdout before running job")
PARSER.add_argument("--qc", action="store",
                    help="Indicate circuit name of python-coded QuantumCircuit")
PARSER.add_argument("--status", action="store_true",
                    help="""Print status of chosen --backend to stdout
                    (default all backends)
                    of --api_provider (default IBMQ)
                    and exit 0""")
PARSER.add_argument("--token", action="store",
                    help="Use this token")
PARSER.add_argument("--url", action="store",
                    help="Use this url")
PARSER.add_argument("filepath", nargs='*',
                    help="Filepath(s) to 0 or more .qasm files, default is stdin")

ARGS = PARSER.parse_args()

AER = ARGS.aer
API_PROVIDER = ARGS.api_provider.upper()
ARGS = PARSER.parse_args()
BACKEND_NAME = ARGS.backend
BACKENDS = ARGS.backends
CIRCUIT_LAYOUT = ARGS.circuit_layout
CONFIGURATION = ARGS.configuration
DATETIME = ARGS.datetime
FIGURE_BASENAME = ARGS.figure_basename
FILEPATH = ARGS.filepath
HISTOGRAM = ARGS.histogram
JOB = ARGS.job
JOB_ID = ARGS.job_id
JOB_RESULT = ARGS.job_result
JOBS = ARGS.jobs
MAX_CREDITS = ARGS.credits
MEMORY = ARGS.memory
ONE_JOB = ARGS.one_job
OUTFILE = ARGS.outfile
PLOT_STATE_CITY = ARGS.plot_state_city
PROPERTIES = ARGS.properties
QASM = ARGS.qasm
QASM_SIMULATOR = ARGS.qasm_simulator
QC_NAME = ARGS.qc
QCGPU = ARGS.qcgpu
QISKIT_VERSION = ARGS.qiskit_version
QUBITS = ARGS.qubits
QVM = ARGS.qvm
QVM_AS = ARGS.qvm_as
RESULT = ARGS.result
SHOTS = ARGS.shots
SIM = ARGS.sim
STATUS = ARGS.status
TOKEN = ARGS.token
TRANSPILE = ARGS.transpile
UNITARY_SIMULATOR = ARGS.unitary_simulator
URL = ARGS.url
VERBOSE = ARGS.verbose

QJ = QisJob(filepaths=FILEPATH,
            provider_name=API_PROVIDER,
            backend_name=BACKEND_NAME,
            token=TOKEN, url=URL,
            num_qubits=QUBITS, shots=SHOTS, max_credits=MAX_CREDITS,
            outfile_path=OUTFILE, one_job=ONE_JOB, qasm=QASM,
            use_aer=AER,
            use_qasm_simulator=QASM_SIMULATOR,
            use_unitary_simulator=UNITARY_SIMULATOR,
            qcgpu=QCGPU, use_sim=SIM, qvm=QVM, qvm_as=QVM_AS,
            qc_name=QC_NAME, xpile=TRANSPILE,
            circuit_layout=CIRCUIT_LAYOUT,
            print_job=JOB, memory=MEMORY, show_result=RESULT,
            jobs_status=JOBS, job_id=JOB_ID, job_result=JOB_RESULT,
            show_backends=BACKENDS, show_configuration=CONFIGURATION,
            show_properties=PROPERTIES,
            show_statuses=STATUS, date_time=DATETIME,
            print_histogram=HISTOGRAM, print_state_city=PLOT_STATE_CITY,
            figure_basename=FIGURE_BASENAME,
            show_q_version=QISKIT_VERSION, verbose=VERBOSE)

QJ.do_it()

sys.exit(0)
